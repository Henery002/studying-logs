1、DOM：
	1、什么是DOM：专门操作网页内容的API
		JS：三大部分：
			ECMAScript（核心语法 9day）+
			DOM（专门操作网页内容的API 3day）+
			BOM（专门操作浏览器窗口的API 2day）
		DHTML： 【笔试题】  HTML  XHTML  DHTML  XML
			HTML：专门编写网页内容的语言
			XHTML：一个更严格的XHTML标准
			DHTML：一切可以实现网页动态效果的技术的统称
				包含：HTML + CSS + JS
			XML：Extensible Markup Language
				专门存储和传输格式化数据的文档结构。HTML是XML的一个子集
			JSON：JavaScript Object Notation
		3种API：
			1、"核心DOM"：万能的。能够操作一切结构化文档。
				包括：HTML  XML
				问题：API繁琐
				解决：用专门的HTML DOM
			2、HTML DOM：是专门操作HTML网页内容的API。
				对核心DOM中'部分常用的'API提供的简化版本。 -- 不是万能的。
				实际开发中选择最简单的用，如果简单的无法实现，就用会用的。
			3、XML DOM：专门操作XML文档的API。
2、***DOM Tree：
	1、什么是DOM树：网页的所有内容在内存中其实是以树形结构存储的。
		1、何时创建：当浏览器读取到HTML内容时，会自动创建DOM树。
		2、如何创建：
			1、读到HTML文档时，先创建根节点：
				document 可以查找元素、创建元素
			2、开始顺序读取HTML文档的内容，创建子节点。
				网页中的一切内容都是DOM树上的节点对象。
			
			节点对象：Node类型是所有节点类型的父类型。Node类型提供了所有节点对象共有的基本属性和方法。
				三大属性：
					1、node.nodeType:节点的类型。Number类型的属性
						何时使用：区分节点/区分节点的类型时
						如何使用：值是数字
							document：9	
							元素节点：1
							属性节点：2
							文本节点：3
							DOCTYPE: 10
						问题：nodeType无法细致区分每种元素
						解决：
					2、node.nodeName: 节点的名称：
						何时使用：判断或区分节点名时
							更多用于细致区分每种元素标签名
							document：#document
							元素节点：标签名(全大写)
							属性节点：属性名
							文本节点：#text
							DOCTYPE:  html
					3、node.nodeValue: 节点属性值。字符串类型的属性
							document：null/undefined
							元素节点：null/undefined
							属性节点：属性值
							文本节点：文本内容
							DOCTYPE:  属性值
			节点间关系：2大类
				【节点树】：包含所有内容的树结构
					任何文本也是节点，所以，节点树会受到看不见的空文本的干扰
				1、父子关系：4个
					1、elem.parentNode => 获得ele的父节点
					2、elem.childNodes -> 是类数组对象，不是数组
							=> 获得elem的所有直接子对象
					3、elem.firstChild => 获得elem的第一个子节点
					4、elem.lastChild => 获得elem的最后一个子节点
				2、兄弟关系：2个：
					1、elem.previousSibling	=> 获得elem的前一个兄弟节点
					2、elem.nextSibling	=> 获得elem的后一个兄弟节点
				
					何时使用：站在现有节点，查找周边节点。建议查找节点要就近。
				
				【元素树】：仅包含元素节点的树结构。不是一颗新的树，仅是节点树的子集。
					优点：仅包含元素节点，不受空文本的干扰
					缺点：无法访问文本节点
						变通：elem.innerHTML
					包含：2大类：

						  节点树				元素树
						parentNode			parentElement
						childNodes			children
						firstChild			firstElementChild
						lastChild			lastElementChild
						previousSibling		previousElementSibling
						nextSibling			nextElementSibling
				
		3、递归遍历：遍历指定父节点下的所有子节点	
			2步：
				1、先定义一个函数，仅遍历"直接子节点"
				2、对每个直接子节点，再次调用当前遍历函数本身。

			childNodes：返回所有直接子节点对象，保存在一个类数组对象中。
				是一个动态集合：不实际存储对象的完整属性。
				问题：每次访问动态集合时，都会反复去DOM数查找。
				解决：在遍历的时候，首先将length属性的值保存在变量中，用变量作为循环的条件。
					eg: 例 - 3_2
						for(var i=0,len=children.length;i<len;i++){...}
				算法：深度优先遍历
					每次都优先遍历子节点。"所有子节点"遍历完毕，再遍历兄弟节点。

	2、遍历API：
		1、NodeIterator:（节点遍历器）"按照深度优先的原则"，依次读取指定父节点下的每个节点
			如何使用：2步
				1、创建NodeIterator对象：
					var iterator = document.createNodeIterator(parent,NodeFilter.SHOW_ALL,
																			  .SHOW_ELEMENT
						null,false
						);
				2、反复调用：
					var currNode = iterator.nextNode();
						//让iterator跳到下一个节点，并返回
						到头返回null
					强调：调用一次nextNode，只向前跳一个节点
					iterator.previousNode();
						//退一个节点
		2、TreeWalker：基本用法和NodeIterator完全一样。
			又提供了向四周跳转的方法：
			强调：
				1、不遍历根节点，只遍历子节点
				2、又提供了向四周跳转的方法：
					walker.parentNode();
						  .firstChild();
						  .lastChild();
						  .nextSibling();
						  .previousSibling();
3、查找：
	DOM：可以查找、修改、创建、删除元素
	1、按HTML属性查找：
		1、按id查找一个元素：
			var elem = document.getElementById('id');
			强调：ById只能用在document对象上。
		2、按标签名查找多个子元素：
			var elems = parent.getElementsByTagName('标签名');
			强调：1、ByTagName可用在任意父元素上。
				  2、ByTagName不止查询直接子节点，且查询所有后代节点。
		3、按class查找：
			var elems=parent.getElementByClassName('class');
		4、按name查找：
			var elems=parent.getElementByName('name');
		
		强调：即使返回一个元素，也会放在集合中返回，
				所以必须加[0]，才能取出唯一的元素

		返回值elems：是动态集合
	
	2、用选择器查找：	-- "Selector API"，是 jQuery 的核心
		1、找1个：
			var elem=parent.querySelector('select');
		2、找多个：
			var elems=parent.querySelectotAll('select');

			强调：elems非动态集合，不会导致反复遍历DOM树。
			何时使用：
				如果需要多次getXXX才能找到目标元素时。
			不适合使用：
				基于现有节点向上或向周围爬树时。

		【笔试题】：getXXX	 vs		Selector API
			效率：getXXX的效率 比 Selector API 高！
				因为前者返回动态集合，不需要准备就可返回结果。	-- 快
					后者准备好所有相关数据再返回。	-- 慢
			返回值：前者  -> 动态集合，可能造成反复遍历DOM树。
					后者  -> 非动态集合，不会造成反复遍历DOM树。
			如何选择：如果一次getXXX查找
	
			不需要查找，可直接获得的元素：
				document.body	->	<body>
				document.head	->	<head>
				document.head	->	<head>
				