1、JavaScript概述
	1、什么是JavaScript
		简称JS
		一种运行于 JS解释器/引擎 中的解释型脚本语言
		1、JS解释器/引擎
		2、解释型脚本语言
			1、编译型
				C/C++
				先编译再执行
			2、解释型
				无需编译，直接执行，遇到错误则停止
		JS解释器：
			1、独立安装的JS解释器
				NodeJS
			2、嵌入在浏览器内核中的JS解释器
	2、JS发展史
		1、1992年 Nombas公司 --> CMM(C--) --> ScriptEase
		2、1995年 Netscape网景 --> 
		3、1996年 ...
		4、1997年 ...
		
		完整的JS由三部分组成
		1、JS核心-ECMAScript（ES）
		2、文档对象模型（DOM ：Document Object Model）
		3、浏览器对象模型（BOM : Browser Object Model）
	3、JS特点
		1、任何文本编辑工具都可以编写
		2、无需编译，由JS解释器负责运行
		3、弱类型语言
			由数据来规范语言
			强类型语言：
			由数据类型来规范数据
		4、【面向对象】
	4、JS用途
		1、客户端JS（前端）
			1、数据计算
			2、表单验证
			3、异步提交数据（Ajax）
			4、事件的触发和处理
			5、特效
		2、服务器端JS（后端）
			1、分布式运算
			2、实时服务器
			3、窗口应用
			4、网络应用
2、JS语法
	1、使用JS
		1、浏览器内核
			作用：负责渲染页面。由两部分组成
			1、内容排版引擎：解析HTML与CSS
			2、脚本执行引擎：解析JS
			
			"浏览器		内核		排版引擎		脚本引擎"
			IE			Trident			-			Chakra
			Firefox		Gecko			-			Monkey~
			Safari		Webkit		Webcore			Nitro
			Chrome		Webkit		Webcore			V8
			Opera		Presto			-			Carakan
			Opera(2013)	Webkit		Webcore			V8
		2、环境搭建-运行
			1、独立安装的解释器 - NodeJS
				1、开始菜单中 --> cmd
			2、嵌入在浏览器中的引擎
				1、使用浏览器控制台输入代码并执行
				2、将脚本嵌入在HTML页面中【重要】
					1、直接在HTML元素事件中执行JS脚本
						onclick事件：单击元素时所做的操作。
						eg:
							<button id="btn" onclick="console.log("JS脚本")">
								测试
							</button>
					【
					2、在HTML页面中，通过 
							<script></script>
					   编写JS脚本
					3、将JS脚本 编写在外部脚本文件中（js文件）
						代码：
							document.write("output...");
					】
			代码：	console.log("待输出内容");
			  作用：在控制台上输出一句话
			  
			......	

	2、调试JS
	3、语法规范
		1、基本规范
			1、语句：组成JS的最基本单位
				console.log();
				document.write();
			
				var a = 10;
				var r = a + b / c;
				1、由 表达式、关键字、运算符
					关键字：由JS定义，具备特殊功能的字符，称之为关键字
				2、严格区分大小写
				3、语句使用 ; 表示结尾

			2、注释：不会被执行
				单行注释：  //
				多行注释：  /**/
3、变量和常量（重点）
	1、什么是变量
		内存：临时性保存。
		保存程序正在运行过程中所需要用到的数据。
		硬盘：永久性保存数据。

		内存空间：内存中，保存数据的一个空间
		变量：内存中的一个存储空间，一个可以变化的数据。
		变量名：一个变量（内存空间）的别名
		值：变量中保存的数据
	2、变量的声明
		1、什么是变量的声明
			如何到计算机内存中申请一段空间用来保存数据
		2、语法
			var 变量名;
			var 变量名1,变量名2,...;
			eg:
				1、声明一个空间，用于保存用户的名称
					var userName;
				2、声明几个空间，用于保存用户的年龄，性别，工资
					var age , gender , salary ;
		3、赋值
			语法：
				变量名=值;
				1、var age;
				   age = 18;
				   var age = 18;
				注意：
					1、值为 数字
						var age = 18;
						var score = 98.5;
					2、值为 非数字，即字符串时
						var userName = 'hello';
		4、打印输出变量
			console.log(变量名);
			document.wirte(变量名);
			eg:
				var age = 18;
				console.log(age);	//18
				document.write(age);	//18

		5、变量名命名规范
			1、不允许使用 JS关键字、保留关键字 做变量名
			2、可以包含 字母、数字、下划线_ 、$ 符号
			3、不能以 数字 开头
			4、最好见名知意
			5、命名方式
				1、匈牙利命名法
					txt : 文本框、密码框、...
					rdo : 单选按钮
					chk : 复选框
						  ...
					在获取页面元素时使用
				2、下划线命名法
					var _userName;
				3、驼峰命名法
					变量名称由多个单词组成，第一个单词所有字母全部小写，从第二个单词开始，每个单词的首字符变大写。
					/*var userName;*/
	3、变量的使用
		1、变量未经初始化就使用
			只声明，未赋值的变量，结果为 undefined
		2、未经声明的变量
			报错
		3、声明变量不使用 var 关键字
			gender = "男";		//可以
			如果声明变量时不使用var关键字而直接赋值的话，声明的是一个全局变量，容易引发"全局污染"的效果。
			声明变量时，尽量使用 var 关键字。
		4、【变量的存取操作】
			1、存 - 为变量赋值
				变量 出现在 = 的左边，一定是赋值
			2、取 - 获取变量的值
				1、放在函数中使用
					document.write(变量);
					console.log(变量);
				2、变量出现在 = 的右边，一定是取值
					var userName = "张三";	//赋值 
					var newName = userName;
					newName : 取值操作
					newName : 赋值操作

					有 = 的时候，一定是【先计算 = 右边的表达式或变量的值】，
					再将其赋值给 = 左边的变量。而且 = 的左边必须是【变量】。
	4、运算符
		1、赋值运算符
			= ：将等号右边的内容赋值给左边的常量
			由赋值运算符组成的表达式称为 赋值表达式
			赋值表达式的值 为 右侧表达式计算出来的结果
		2、算数运算符
			+ , - , * , / ,%
			1、%
				取余，俗称：模
				eg：
					2 % 5 ：结果为 2
				【场合】：
				1、判断某数字的奇偶性
					55 % 2 结果为 1，所以为奇数
				2、判断某数字是不是 n 的倍数
					判断 188 是不是 3 的倍数
					判断 188 和 3 取余，看结果是否为 0 。
				3、获取某数字的最后几位
					获取 1234 的最后一位
					eg：
						1234 % 10  结果 4
						1234 % 100 结果 34
			2、+
				作用：
					1、做 加法 操作
						要求：+ 两边的操作数必须是数字
					2、做 连接 操作
						如果 + 两边的操作数，有一个是字符串类型的，那么起连接的效果
			3、优先级
				先算 * / % , 再算 + - 。平级时：从左向右算
				可以通过 () 提升优先级
			由算数运算符组成的表达式称之为算数表达式。
	5、常量
		1、什么是常量
			一经声明就不允许被修改的数据，称之为常量
		2、目的
			为了保证数据的准确性
		3、语法
			const 常量名称 = 值;
			注意：常量名一般采用全大写方式表示
				eg:
					圆周率符号 用 PI
4、数据类型
	问题：想在内存中保存一个数字，开辟多大空间比较合适。
	1、什么是数据类型
		保存的数据类型是什么
	2、数据类型的分类
		1、原始类型（基本类型）
			1、number 类型
				数字类型
				可以表示32位(4字节)的整数，或64位(8字节)的浮点数（小数）
			2、string 类型
				字符串类型
				注意：使用时，必须用 "" 或 '' 引起来
				eg:
					var num = 18;	//number类型
					var num = '18';	//string类型
				转义字符
					\n :换行
					\r :回车
					\t :制表符
					\\ : \
					\' : '
					\" : "
			3、
		2、引用类型


















