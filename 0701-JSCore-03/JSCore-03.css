1、***循环
	1、什么是循环：让程序反复执行同一段代码
	2、如何使用：
		三要素：
			1、循环条件：让循环可以继续执行的条件。
			2、循环变量：在循环条件中，用作比较的变量。
				循环变量总是向着不满足循环条件的趋势变化。
			3、循环体：循环反复执行的代码段。
		三种循环：
			1、当"循环变量的变化没有规律时"
				whie：
					var 循环变量 = 值;
					while(循环条件){
						循环体;
						迭代变化循环变量
					}
			2、先执行循环体，再判断循环条件，决定是否继续。
				var 循环变量 = 值;
				do{
					循环体;
					迭代变化循环变量;
				}while(循环条件);
			区别：
				只看第一次循环条件是否满足
				如果第一次的条件都满足，则两者完全等效
				如果第一次的条件不满足，则：
					while一次都不执行，
					do while至少可执行一次
			总结：退出循环
				1、用循环条件控制退出 -- 优雅，但是难度大		-- 仍然建议使用
				2、用break退出		  -- 野蛮，但是随意，简单
			3、当循环条件的变化有规律时：
				for(var 循环变量=值;循环条件;迭代变化循环变量){
					循环体;
				}
				eg：
					//1-100累加计算
					var sum=0;
					for(var i=1;i<=100;i++){
						sum+=i;
					}
					console.log(sum);
				特殊写法：
				1、在第一部分中：可同时声明并初始化多个变量
				2、第三部分中，可同时执行多个短小的操作，用逗号分隔，
				eg：
					//利用上述写法简化代码，实现1-100的累加计算
					for(var sum=0,i=0;i<=100;sum+=i++);		//尤其注意该;不能省略
					console.log(sum);
				3、死循环：while(true)	for(;;)
				eg：（见demo-02）	
					var count=0;
					for(var n=0;n<5;y+=n==0?1:4){	//n是输出润年的个数，输出5个即可
						count++;
						(y%4==0&&y%100!=0||y%400==0)&&(n++,console.log(y));	//若果是闰年，就把n+1，并且输出该y	
					}
					console.log(count);
				【补】：其实，if、else、for、while之后只有一句话
					可省略{} -- 不建议
					......
2、***数组
	1、什么是数组：
		内存中连续存储多个数据的存储空间，在起一个名字。
			数组是 引用类型 的对象
	2、为什么：
		程序 = 数据结构 + 算法
		算法：解决问题的步骤
		数据结构：数据在内存中的组织结构。好的数据结构可以极大提高程序的执行效率
	3、何时使用：存储多个相关的数据时，用数组二不用变量
	4、如何使用数组：
		1、创建数组：3个场景
			1、创建一个空数组：2种：
				var arr=[];		//创建一个新数组
				var arr=new Array();
						创建  数组
				何时使用：创建数组，不确定数组元素的内容。
			2、创建数组同时，初始化数组元素：
				var arr=[值1,值2,值3,...];
				var arr=new Array[值1,值2,值3,...];
						创建 数组 向数组中加入...
				何时使用：创建数组时，已经知道每个元素的内容。
			3、创建n个空元素的数组：
				var arr=new Array(n);
				何时使用：创建数组，仅知道将来的元素个数，不确定元素内容时。
		2、访问数组元素
			先找到数组的变量，再使用下标在数组内找到指定位置的元素。
			下标：数组中唯一标识一个元素的存储位置的序号。默认从0开始，连续递增不重复
				比如：arr[i] 访问arr数组中下标为i位置的元素
				每个元素的用法和普通变量，完全一样。
				数组 又称为 一组变量的集合，再起一个统一的名字
		【补】: 垃圾回收：清除不再使用的对象，释放存储空间。
			对象：内存中存储多个数据的存储空间。其占用的内存比普通变量大
				垃圾回收进程（器）：是一个专门负责释放不再使用的对象的小程序。
					是js引擎自带的自动执行的后台程序
					对声明周期：（垃圾回收的原理）
					1、创建对象时，垃圾回收器会标记该对象的引用计数器为1
						引用计数器：记录一个对象被几个变量引用着。
					2、使用对象过程中，只要多一个变量引用该对象，计数器就+1
					3、当主动为一个变量赋值为null时，就释放了该变量对对象的引用。计数器就-1
					4、如果一个对象不再被任何变量引用，计数器就变为0，垃圾回收器就释放对象。
			建议：在使用完一个较大的对象后，都要主动用null释放对该对象的引用。
			强调：【"JS中数组的三大差别"】：（三个不限制）
				1、不限制数组元素的个数
					可随时在任何位置添加新元素
					只要为该位置强行赋值，数组就会自动在该位置创建一个新元素
				2、不限制数组元素的数据类型
				3、不限制下标越界
				"JS中数组越界，不会报错! 而是返回undefined"
			
			数组的length属性：表示数组中元素的个数
				固定套路：
					1、如何获得数组最后一个元素：
						arr[arr.length-1]
						数组的length属性，永远是最大下标+1
					   如何获得数组倒数第n个元素：
						arr[arr.length-n]
					2、如何在数组末尾追加新元素：
						arr[arr.length]=新值
						"稀疏数组"：
							数组元素的下标不连续的数组。但是其length属性却始终是最大下标+1
					3、数组缩容：
						arr.length-n
					数组遍历：依次获取数组中每个元素，对每个元素执行相同的操作。
						for(var i=0;i<=arr.length;i++){
							arr[i];		//当前正在遍历的元素
						}
			【	 索引数组】：下标都是数字的数组（即上述常规数组）
			【***关联数组】：
				什么是：可自定义下标名称的数组
				为什么：索引数组的下标没有实际意义
				何时使用：只要希望每个元素由特定意义，就要自定义下标名称。
				如何创建：2步：
					1、先创建一个空数组；
					2、向数组中添加新元素，下标要"用自定义的字符串"作为名称。
				【"关联数组中的length属性失效，永远为0"】
					遍历关联数组中每个属性：
						for(var key in arr){
							arr[key]		//当前属性值
						}
						in：依次获取arr中的每个属性名
						key:用来保存in本次返回的属性名
			关联数组，也成为hash数组：
				hash(散列)算法：接收一个字符串，计算出一个尽量不重复的序号
				特点：不同的字符串，尽量算出不重复的字符串。
					  同一个字符串，算出的结果一定相同。
					所以hash中的下标(key)不可重复，是唯一的。
				存储原理：先将该元素的下标名称交给hash算法，计算出一个尽量不重复的存储位置。将数据保存到该位置。
				取值：将 要查找的下标名称交给hash算法，计算出和存储时完全一致的位置。直接通过地址找到元素。
			索引数组：查找未知位置的元素，只能靠遍历。
				缺点：受元素个数和元素存储位置的影响极大。
			HASH数组：只要知道元素的属性名，不需要遍历，即可直接获得元素的内容。
				优点：查找速度极快，且和元素个数和存储位置无关。
			
			数组API：
				数组："封装一组连续的数据，并提供对数据进行操作的API"
				API:
					1、to str: 2种：
						1、String(arr):将数组中每个元素转为字符串并且用逗号链接。  --  拍照
						2、arr.join("连接符")：将数组中每个元素转换为字符串，用自定义的“连接符”连接每个元素
					
						固定套路：
							1、无缝拼接: var str=arr.join("")
							2、将数组中的元素拼接为页面的HTML代码
					2、拼接和截取："都无法直接修改原数组"，而是返回新书组，用变量接住
						拼接：
							var newArr = 
								arr1.concat(值1,值2,arr2,值3,...)
							将值1，值2...拼接到arr1之后，
							强调：concat可以打散数组类型的参数为单个元素，逐个拼接。
						截取子数组：
							var subArr=arr.slice(starti,endi+1);
								"复制"出arr中starti位置开始，到endi位置的元素组成新数组返回
							特点：
								1、slice：含头不含尾，结束位置要+1
								2、支持负数参数：表示倒数第i个位置。其实执行的还是length-n。
								3、如果从starti的位置直接截取到结尾，就省略第二个参数。
									如：arr.slice(1);	表示从第二个字符开始，截取后面的所有部分。
				splice：删除元素、插入元素、替换元素			--  瑞士军刀  -_-||
					【"直接修改原数组"】
					删除：arr.splice(starti,n)
						删除arr中starti位置开始的n个元素
						其实，splice方法会返回 被删除的元素 组成的临时数组，用于后续的操作。
					插入：arr.splice(starti,0,值1,值2,...)
						在arr的starti位置插入值1，值2，...，原starti位置的值及其之后的值自动向后顺移
						但是splice与concat不同，不支持数组类型的参数，无法打散数组。（会变成二维数组）
					替换：arr.splice(starti,n,值1,值2,...)
						先删除starti位置的n个元素，再在starti位置插入值1，值2，...
				reverse：颠倒数组中的元素：【直接修改原数组】
					arr.reverse();
						只是机械的将数组颠倒
		3、








