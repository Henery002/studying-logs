JavaScript-Core:6月29日：
犀牛书：JavaScript权威指南
望远镜书：JavaScript高级程序设计
微信公众号：微信大全
前端网站：JS1k:The JavaScript code golfing competition

JavaScript:三大部分

JavaSCript:四大特点
	1、运行在脚本解释引擎中
		引擎：浏览器中执行专门任务的小软件
			内容排版引擎：负责解析HTML和CSS，生成网页内容和样式。
			脚本解释引擎：负责解释并运行 JS脚本程序。
		多数JS运行在客户端的脚本引擎中
	2、解释执行：
		默认自上向下，边解释边执行。
	   编译执行：
		编译：在执行程序前，自动检查错误，优化代码。
	3、弱类型：
		1、变量在声明时不需要提前指定数据类型
		2、一个变量先后可保存不同类型的数据
		3、隐式转换
		4、基于/面向对象
2、变量
	什么是变量：内存中存储一个数据的存储空间，再为其起一个名字
	何时使用变量：只要一个数据可能被反复使用，都要先保存在变量中，再反复使用变量
	如何使用变量：
		声明：在内存中创建一个存储空间，再起一个名字。
			如何声明：var 变量名;
			同时声明多个变量：var 变量1,变量2,...;
			仅声明还未赋值的变量，默认为undefined。
			规定：所有变量使用前，必须先声明。
		赋值：将一个数据保存到变量中
			如何赋值：变量 = 值;
				强调：等号左边只能是一个变量，左右顺序不能颠倒
			同时为多个变量赋值：变量1 = 值1 ,变量2 = 值2 ,变量3 = 变量4 = 值3;
			如果给一个未声明过的变量赋值，js会在全局范围内自动创建同名变量--严格禁止该做法
			强烈建议：在声明变量的同时，就初始化变量的值
				var 变量 = 值;
		取值：找到变量，并取出变量中的值使用
			在表达式的任何位置，只要读到变量名，js就会找到变量取出值，代替变量所在的位置。
			如果表达式中试图使用一个从未声明过的变量，会报错：
				ReferenceError:xxx is not defined
				笔试题：var a,b = 10;	//a:undefined	b:10
				声明提前：hoist
					在开始执行程序前，都会将var声明的变量，集中到程序顶部创建，
					然后才开始执行程序，赋的值留在原地
				笔试题：consolg.log(a);
						var a = 10;
						console.log(a);		//不会报错

		【补：控制台的操作】：
			1、多行编写：shift+回车
			2、控制台中可记录之前执行过多的所有语句：
				用 上下键 切换新旧代码
			3、清屏：左上角园叉
			
			设置Chrome的起始页面为空白页面：

3、数据类型
	什么是：数据在内存中的存储格式
	为什么：不同类型的数据，能执行的操作也不同。
	包含：2大类：
		1、原始类型：数据直接保存在变量本地的数据类型
			包括：5个
				number:js中保存一切数字的类型。即可保存整数，也可保存浮点数（小数）
					何时使用：如果一个数字经常用于算数计算或比较大小，就要保存为数字类型
					如何：程序中不带引号的数字直接默认就是number。
					存储空间：整数占4字节
							  浮点数占8字节
					【舍入误差】：计算机中也有计算不尽的数值。使用计算不尽的数值执行计算时，产生的误差，就叫舍入误差。
						不可避免，只能近似解决：
							n.toFixed(2)		//将n按两位小数四舍五入
			
				string:保存一串字符序列的数据类型
					何时使用：仅用于显示的内容，就存为字符串。
					如何使用：在程序中凡是引号包裹的字符都是字符串。
					存储空间：js内存中，用unicode编码来表示每个字符：
						unicode:人为的为全球主要语言中的每个字编一个号。
						为什么：计算机不认字符只认数字
						返回：汉字的编码范围：19968-40869
									一个汉字占2字节
							  数字的编码范围：48-57
							  大写字母：65-90
							  小写字母：97-122
									一个字母或数字占1字节
				boolean:只有两个值的数据类型
						true	false
					何时使用：一般用作判断的结果
					如何使用：只要不加引号的true或false，默认都是bool类型。
				undefined:表示一个变量声明后，从未被赋值 -- 空。
					专门用于程序自动初始化变量的默认值。
				null:表示一个变量暂时未引用其他变量或保存其他数据 -- 空。
					专门用于程序员主动清空一个变量的内容。
				其实undefined和null在本质上是一样的
		2、引用类型：数据无法直接保存在变量本地的数据类型
	1、数据类型转换
		隐式转换：无需程序员干预，js自动完成的类型转换。
		强制转换：由程序员主动调用API实现的类型转换。
		何时强制转换：只要隐式转换的结果不是想要的，就要强转。
			分为：
			补：typeof(x) -> 返回变量的数据类型
				1、x to string
					【var str = String(x);】	//万能
					  var str = x.toString();	//不能转null和undefined
				eg:
					function String(x){
						if(x===undefined){
							return "undefined";
						}else if(x===null){
							return "null";
						}else{
							return x.toString();
						}
					}
				2、x to number:
					【var num = Number(x);】
						【只能转换纯数字组成的字符串】	或	【bool类型(true -> 1 false -> 0)】
						何时使用：将不确定的类型，转换为字符串时。
					str to number:
					【var num = parseInt(str);】
						从str的开头依次读取每个字符。
						跳过开头的空字符，仅读取纯数字内容。
						直到碰到第一个不是数字的字符退出
						缺点：不认识小数点 -- 去掉小数部分
						解决：
						【var num = parseFloat(str);】
							原理和parseInt完全一样
							差别：认识第一个小数点
							建议：【首选parseFloat:】
								1、不会丢弃小数部分。
								2、如果可以转为整数，parseFloat优先转为整数！
							除非非常明确地希望
						
						如果无法转为数字，都返回NaN：
							NaN:not a number	
								typeof(NaN):number
							代表所有非数字的字符 -- 范围
							参与算术运算，结果永远等于 NaN；
							参与关系运算，不等于、不大于、不小于一切值。
								NaN == NaN	//false
				3、x to bool:
					【var bool = Boolean(x)】
						规定：只有5个值会被转成false,其余一律转为true：
							""	0	NaN  undefined	null
	2、【***】运算符和表达式
		程序：人的想法在计算机中的执行
		运算符：程序中模拟人的想法的特殊符号
		表达式：由数据、变量和运算符组成，执行一项任务的程序语句。

		算数运算：+ - * / %
			% : m%n :m/n,取除不尽的余数部分。
			何时使用%：
				1、判断能否被整除时
				2、限制运算的结果，不能超过某个值
					m%100 -> 最大值99
			隐式转换：
				算数运算中
				默认情况下：一切都转为数字，再算数运算
				特例：+运算中，只要碰到一个字符串，就都转为字符串，
					  +法计算变为字符串拼接。
		关系运算：作比较和做判断
			>	<	>=	<=	==	!=
			隐式转换：一切都转为数字再比较
			特例：
				1、参与比较的两个值都是字符串
					不再转换为数字
					而是按位PK每个字符串的unicode号。如果前几位完全一样，就要比长短。
				2、判断NaN：
					问题：NaN无法用普通的 == 判断
					解决：【var bool = isNaN(num);】
						如果返回true，说明num是NaN 
							返回false，说明不是NaN
					反过来用：判断num是否是一个数字
						【var bool = !isNaN(num);】
						返回true:说明num是数字
						返回false:说明num不是数字
				3、 问题： == 无法区分null和undefined
				    解决：全等：=== ，不带隐式转换的 ==
						首先要求类型系统，然后值再相同，才是全等
					何时使用：
						1、只要区分null和undefined
						2、只要规定等于比较时，类型也必须相等，就用全等。
				4、如果参与等于比较的两个数据，都是引用类型的对象，则不进行任何转换，只比较两对象的地址
						[1,2,3,4] == [1,2,3,4]		//false,两个数组的内存地址不同
						
						var a = {};
						var b = {};
						a == b;		//false
						
						比如：[]==[] false



		逻辑运算：综合多个关系运算的结果，得出最终结论
			&&：逻辑与，读作“且”
				eg:	条件1 && 条件2
					只有条件1和条件2都为true时，结果才为true。
					只要有一个条件为false，结果为false
			||: 逻辑或，读作“或”
				条件1 || 条件2
				只要任意一个条件为true，结果为true
				除非所有条件都为false，结果为false
			!:  逻辑非
				颠倒判断的结果
			运算符优先级：
				优先级越高的运算符，优先执行
				决定了js断句的顺序和位置
				避免死记优先级？只要需要先执行的代码都加()
			
			【【短路逻辑】】：
				如果前一个条件已经可以得出最终结论，则后续条件不再执行。
				&&：若前一个条件为false，则直接得出结论：false
				||：若前一个条件为true，则直接得出结论：true
				
				笔试题：
					var n = 10;
						n<10&&m>10;		//false
						n>=10&&m<10;	//报错	ReferenceError: m is not defined
						n<10||m<10;		//报错	ReferenceError: m is not defined
						n>=10||m<10;	//true
			如何利用短路逻辑：
				&&：简单分支：
					即一个条件一件事，满足就执行，否则什么也不做
					条件%%操作：
						只有满足”条件“时，才执行”操作“
					eg:
						商品打折
						var price = 600;
						price>=500&&(price=price*0.8);
						console.log(price);
				||: 在两个值中挑一个有效的使用
					值1 || 值2
					Boolean(值1)
						如果值1转为bool后为true，就用 值1
						如果值1转为bool后为false，就用 值2
					eg2:
						输出回复内容
						var reply = ...

		位运算：
			左移和右移：
				m << n : 即左移，即m*2的n次方
					相当于：m*Math.pow(2,n);
				m >> n : 即右移，即m/2的n次方
					相当于：m/Math.pow(2,n);
			取整：
				m>>>0	m^0		m|0
					相当于：parseInt(m);
		扩展赋值运算：对特定赋值运算的【简写】
			如果取出变量m中的值做计算，再将结果放回到m中保存时，就可以扩展复制运算简写
				m=m+n  =>  m+=n	将n累加到m中
				m=m-n  =>  m-=n
				m*=n
				m/=n
				m%=n
			如果每次只递增1或递减1
				m++ => m+=1 => m=m+1
				m-- => m-=1 => m=m-1
			
			当递增递减运算符参与到另一个表达式内时，++和--有前后之分
				++m 和 m++
					相同：m（原值）的值一定 都加1
					不同：前++，返回加之后的新值
						  后++，返回加之前的旧值

	作业：C语言实例100题：T2、T3、T5